# Generated by Django 4.2.7 on 2025-07-18 06:01

import django.contrib.postgres.fields
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='RateLimitTracker',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('domain', models.CharField(db_index=True, max_length=200, unique=True)),
                ('requests_per_minute', models.IntegerField(default=10)),
                ('requests_per_hour', models.IntegerField(default=100)),
                ('current_minute_count', models.IntegerField(default=0)),
                ('current_hour_count', models.IntegerField(default=0)),
                ('last_request', models.DateTimeField(blank=True, null=True)),
                ('minute_reset', models.DateTimeField(blank=True, null=True)),
                ('hour_reset', models.DateTimeField(blank=True, null=True)),
                ('is_blocked', models.BooleanField(default=False)),
                ('blocked_until', models.DateTimeField(blank=True, null=True)),
                ('block_reason', models.CharField(blank=True, max_length=200)),
                ('detected_rate_limit', models.BooleanField(default=False)),
                ('rate_limit_response', models.TextField(blank=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'rate_limit_trackers',
                'ordering': ['domain'],
            },
        ),
        migrations.CreateModel(
            name='ScrapingSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_name', models.CharField(max_length=200)),
                ('target_url', models.URLField(max_length=1000)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.FloatField(blank=True, null=True)),
                ('scraper_type', models.CharField(choices=[('requests', 'Requests + BeautifulSoup'), ('selenium', 'Selenium WebDriver'), ('aiohttp', 'Async HTTP'), ('playwright', 'Playwright')], default='aiohttp', max_length=50)),
                ('user_agent', models.CharField(blank=True, max_length=500)),
                ('proxy_used', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('timeout', 'Timeout'), ('blocked', 'Blocked')], db_index=True, default='running', max_length=20)),
                ('scholarships_found', models.IntegerField(default=0)),
                ('pages_scraped', models.IntegerField(default=0)),
                ('errors_encountered', models.IntegerField(default=0)),
                ('response_code', models.IntegerField(blank=True, null=True)),
                ('response_size', models.IntegerField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('error_traceback', models.TextField(blank=True)),
                ('raw_data', models.JSONField(blank=True, default=dict)),
                ('extracted_data', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'db_table': 'scraping_sessions',
                'ordering': ['-started_at'],
                'indexes': [models.Index(fields=['status', 'started_at'], name='scraping_se_status_737637_idx'), models.Index(fields=['target_url', 'status'], name='scraping_se_target__71dd8a_idx')],
            },
        ),
        migrations.CreateModel(
            name='ScrapingRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('domain', models.CharField(db_index=True, max_length=200)),
                ('selectors', models.JSONField(default=dict, help_text='CSS/XPath selectors for data extraction')),
                ('extraction_rules', models.JSONField(default=dict, help_text='Data extraction and transformation rules')),
                ('wait_time', models.FloatField(default=1.0)),
                ('max_pages', models.IntegerField(default=10)),
                ('follow_links', models.BooleanField(default=True)),
                ('generated_by_ai', models.BooleanField(default=False)),
                ('ai_confidence', models.FloatField(default=0.0)),
                ('ai_reasoning', models.TextField(blank=True)),
                ('times_used', models.IntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0)),
                ('scholarships_extracted', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'scraping_rules',
                'ordering': ['-success_rate', '-scholarships_extracted'],
                'indexes': [models.Index(fields=['domain', 'is_active'], name='scraping_ru_domain_afddbe_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProxyServer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('host', models.CharField(max_length=200)),
                ('port', models.IntegerField()),
                ('username', models.CharField(blank=True, max_length=100)),
                ('password', models.CharField(blank=True, max_length=100)),
                ('proxy_type', models.CharField(choices=[('http', 'HTTP'), ('https', 'HTTPS'), ('socks4', 'SOCKS4'), ('socks5', 'SOCKS5')], default='http', max_length=20)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('provider', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('success_count', models.IntegerField(default=0)),
                ('failure_count', models.IntegerField(default=0)),
                ('average_response_time', models.FloatField(default=0.0)),
                ('is_blocked', models.BooleanField(default=False)),
                ('blocked_websites', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'proxy_servers',
                'ordering': ['-success_count', 'average_response_time'],
                'unique_together': {('host', 'port')},
            },
        ),
        migrations.CreateModel(
            name='ContentCache',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(db_index=True, max_length=1000, unique=True)),
                ('url_hash', models.CharField(db_index=True, max_length=64, unique=True)),
                ('raw_content', models.TextField()),
                ('content_type', models.CharField(blank=True, max_length=100)),
                ('content_encoding', models.CharField(blank=True, max_length=50)),
                ('response_headers', models.JSONField(blank=True, default=dict)),
                ('status_code', models.IntegerField()),
                ('content_length', models.IntegerField(default=0)),
                ('cached_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(db_index=True)),
                ('hit_count', models.IntegerField(default=0)),
                ('is_valid', models.BooleanField(default=True)),
                ('validation_notes', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'content_cache',
                'ordering': ['-cached_at'],
                'indexes': [models.Index(fields=['expires_at', 'is_valid'], name='content_cac_expires_92e809_idx')],
            },
        ),
    ]
