# Generated by Django 4.2.7 on 2025-07-18 06:01

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AIAgent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('agent_type', models.CharField(choices=[('master', 'Master Coordinator'), ('searcher', 'Website Searcher'), ('analyzer', 'Content Analyzer'), ('validator', 'Data Validator')], db_index=True, max_length=50)),
                ('ai_model', models.CharField(default='deepseek-chat', max_length=100)),
                ('model_provider', models.CharField(default='novita', max_length=50)),
                ('temperature', models.FloatField(default=0.7)),
                ('max_tokens', models.IntegerField(default=4000)),
                ('is_active', models.BooleanField(default=True)),
                ('current_task', models.CharField(blank=True, max_length=300)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('tasks_completed', models.IntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0)),
                ('average_response_time', models.FloatField(default=0.0)),
                ('system_prompt', models.TextField(blank=True)),
                ('capabilities', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ai_agents',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='SearchStrategy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('target_websites', models.JSONField(default=list)),
                ('search_keywords', models.JSONField(default=list)),
                ('priority_countries', models.JSONField(default=list)),
                ('priority_fields', models.JSONField(default=list)),
                ('max_concurrent_requests', models.IntegerField(default=10)),
                ('request_delay', models.FloatField(default=1.0)),
                ('timeout_seconds', models.IntegerField(default=30)),
                ('times_used', models.IntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0)),
                ('scholarships_found', models.IntegerField(default=0)),
                ('generated_by_ai', models.BooleanField(default=True)),
                ('ai_reasoning', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'search_strategies',
                'ordering': ['-success_rate', '-scholarships_found'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric_name', models.CharField(db_index=True, max_length=100)),
                ('metric_value', models.FloatField()),
                ('metric_unit', models.CharField(blank=True, max_length=50)),
                ('context', models.JSONField(blank=True, default=dict)),
                ('session_id', models.UUIDField(blank=True, null=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='ai_agent.aiagent')),
            ],
            options={
                'db_table': 'performance_metrics',
                'ordering': ['-recorded_at'],
                'indexes': [models.Index(fields=['agent', 'metric_name'], name='performance_agent_i_603c68_idx'), models.Index(fields=['recorded_at', 'metric_name'], name='performance_recorde_ef1d96_idx')],
            },
        ),
        migrations.CreateModel(
            name='AIThought',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('thought_type', models.CharField(choices=[('planning', 'Strategic Planning'), ('analysis', 'Content Analysis'), ('discovery', 'Website Discovery'), ('validation', 'Data Validation'), ('reflection', 'Self Reflection'), ('help_request', 'Help Request')], db_index=True, max_length=50)),
                ('content', models.TextField()),
                ('context', models.JSONField(blank=True, default=dict)),
                ('confidence', models.FloatField(default=0.0)),
                ('importance', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('requires_user_input', models.BooleanField(default=False)),
                ('user_response', models.TextField(blank=True)),
                ('resolved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thoughts', to='ai_agent.aiagent')),
            ],
            options={
                'db_table': 'ai_thoughts',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['agent', 'thought_type'], name='ai_thoughts_agent_i_41bfe2_idx'), models.Index(fields=['requires_user_input', 'resolved'], name='ai_thoughts_require_9b0923_idx')],
            },
        ),
        migrations.CreateModel(
            name='AIDecision',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('decision_type', models.CharField(choices=[('website_discovery', 'Website Discovery'), ('content_analysis', 'Content Analysis'), ('eligibility_check', 'Eligibility Check'), ('relevance_scoring', 'Relevance Scoring'), ('strategy_adjustment', 'Strategy Adjustment')], db_index=True, max_length=50)),
                ('input_data', models.JSONField(default=dict)),
                ('output_data', models.JSONField(default=dict)),
                ('reasoning', models.TextField(blank=True)),
                ('confidence_score', models.FloatField(default=0.0)),
                ('processing_time', models.FloatField(default=0.0)),
                ('tokens_used', models.IntegerField(default=0)),
                ('cost_estimate', models.FloatField(default=0.0)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='decisions', to='ai_agent.aiagent')),
            ],
            options={
                'db_table': 'ai_decisions',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['agent', 'decision_type'], name='ai_decision_agent_i_edc234_idx'), models.Index(fields=['success', 'created_at'], name='ai_decision_success_3fe9a2_idx')],
            },
        ),
    ]
